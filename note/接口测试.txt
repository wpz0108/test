http头字段 Content-Type:application/json;charset=utf-8

接口
	是数据交互的入口和出口 是一套规范,一套标准
	分类
		硬件--usb 电源接口 网线接口..
		软件--前后端共同遵循的一套数据交互的规范
	优点 (高效 灵活--扩展性强 高内聚低耦合)
		高内聚--接口内部独立完成某一功能 单一职责
		低耦合--接口间独立存在 利于修改组合

		统一设计标准 前后端独立开发 扩展性强 

	不使用接口 
		研发标准不统一 团队磨合难度高
		研发周期长
		可扩展性差

接口测试
	测试后端实现是否符合接口规范
	目的是使程序安全 有效率
	流程 模拟用户向服务器发送数据 查看响应结果
	  	 定位url 模拟用户提交数据 查看结果
	类型 
		web接口测试 
			服务器接口测试 测试自己公司接口
			第三方接口测试 测试其他公司实现的接口
		模块接口测试 c/s
	环境搭建
		搭建接口测试的环境 运行程序
	插件
		测试接口的工具
		火狐---RESTClient
		谷歌--POSTman
		java实现的工具--Jmeter(重点)

		测试工具功能强大 便于快速测试

	ReSTful风格
		开发测试时 共同遵守的默认规范 一般是约定俗成 习惯的做法
		目的是使程序易读 易维护
		ReSTful风格是约束接口操作的四种操作及三个要素
		使用
			增 
				要素1 url+post 设置http请求信息头 
				要素2 多个数据 键=值&键=值 或者json格式
				要素3 http响应码200 201+返回添加的数据
			删 
				要素1 url+get|delete
				要素2 键=值
				要素3 http响应码200|204 +无返回数据
			改 
				要素1 url+post|put
				要素2 多个数据 键=值&键=值 或者json格式
				要素3 http响应码200 201+返回修改的数据
			查 
				要素1 url+get
				要素2 url?键=值&键=值
				要素3 http响应码200+返回一条或多条数据
	json是一种数据载体 还有html和xml json传输数据效率高 少量数据部分场景可以用

Jmeter java开发的测试工具
	高效 功能强大
	模拟高并发或者多次循环等特殊场景需求

	环境配置
		下载jmeter 解压
		安装java环境(jmeter java环境 类似于音乐文件和播放器关系)
	应用
		接口测试
		性能测试
		压力测试
		web自动化测试
		数据库测试
		java程序测试
	不支持ip欺骗和前端测试

	bin jmeter的可执行程序
	lib 整合的功能
	启动方式
		1	bin/Apachejmeter.jar 
		2-01 jmeter.bat  windows
		2-02 jmeter.sh 	linux
	测试计划 添加线程组 添加http请求 添加监视器-查看结果树

	进程 一个正在执行的程序 ----测试计划
	线程 进程中的执行线索 一个进程有多个线程 ----线程组的线程数属性
	线程组 按线程性质进行分组 ----线程组

	默认情况下 线程组的线程是并发执行的 每个线程都要执行线程组里的http请求
	并发执行 多个线程组的线程同时执行
	顺序执行 按照顺序执行线程组

	测试计划的独立运行每个线程组 选项可以使线程组按顺序执行或者并发执行

	测试计划添加 setup线程组--最先执行的线程组 可以用来加载程序运行前的配置 资源
				teardown线程组--最后执行的线程组 程序关闭前 数据进行保存等

	测试计划添加配置元件--http请求默认值 将http请求的共同部分设置默认值
					---http信息头管理器 添加请求头信息 

	线程组属性
		--线程属性
			线程数--模拟用户数
			时间 --指定时间启动所有线程
			循环数 --每个用户访问的次数
		--调度器
			前提--线程属性中循环数设置为永远
			1 持续时间和启动延迟  在x秒后访问服务器 持续y秒
			2 启动时间m 和结束时间n  在m时开始 在n时结束
	jmeter组件参数化--动态获取并设置数据
	比如执行批量操作 插入或者删除时 之前数据手写 效率低 参数化可以使程序代替人工获取并设置数据

	jmeter组件参数化-------csv data set config(重要 循环次数)

		编写测试框架 如循环次数3--读取行数
		编写外部文档 存储数据3条
		jmeter添加参数化组件csv data set config并配置
			文件路径 C:\\Users\\HalO\\Desktop\\A测试笔记\\接口测试实例\\参数\\add.txt
			编码格式 utf-8
			参数名 对应字段  --对应json数据中${参数名}
			分隔符 参数名之间分割的字符

		原理 jmeter通过url定位添加接口 提交json数据(键值对) 数据的值来自csv data set config中从外部文档读取的一行行数据值

	jmeter组件参数化-------用户参数 (线程数)
		搭建框架 (测试计划 线程组 http请求 json数据 )
			线程组设置线程数 
			线程组-添加前置处理器-用户参数
		使用jmeter内置组件存储数据
			 添加变量和用户 输入值
		读取组件数据并设置进json数据中
			将变量名作为字段放进json值中 ${变量}

	jmeter组件参数化-------用户定义的变量
		将url后面一样的资源路径设置成变量存储值 操作时 路径用${path}/xx 更简单
		测试计划添加配置元件 用户定义的变量 添加变量名和值 使用时 ${变量名}

	jmeter组件参数化-------函数
		函数封装常用功能 函数助手打开进行选择函数
		__counter()--true 每个用户单独一个计数器 false 所有用户共用计数器 

	四种参数化方法对比
		csv和用户参数 思想一样 后者流程简单 前者更实用
		用户定义的变量 存储全局变量 使用少
		函数灵活 内置常见功能
		一般是csv+函数

	jmeter连接数据库
		jmeter本身不具备连接数据库功能 需要对应的数据库jar包
		测试计划 添加路径或jar包到classpath --添加对应jar包
			C:\\Users\\HalO\\Desktop\\A测试笔记\\接口测试\\MySql_jar包\\sqlite-jdbc-3.21.0.jar
		测试计划-添加配置元件--JDBC Connection Configuration
			variable name --给连接取名 dbConnect 用于调用
			db url-- 数据库路径
				jdbc:sqlite:C:\\Users\\HalO\\Desktop\\A测试笔记\\接口测试实例\\db.sqlite3
			driver class-- jar包启动入口
				org.sqlite.JDBC
			用户名 密码 --数据库设置的用户名 密码

		添加sampler (取样器)--JDBC Request
			variable name --连接名 dbConnect
			sql语句类型 --select statement| update statement
			sql 语句 --select dep_name from departments;
		查询到的结果再处理
			jdbc request操作的结果取出 传递给另一个取样器(sampler 如 http请求)
			jdbc request-设置varibale names 变量名names
			变量结果可能有多个 第n个对应变量名_n #对应个数(添加取样器 debug sampler 查看)
			http请求中 设置路径 ${path}/?name=${names_2} --用户定义的变量 path /aaa/bbb

	jmeter组件关联 
		一个请求的结果作为另一个请求的提交数据 两者有关系
		实现多样的业务逻辑
		实现方法 
			jdbc request 将结果赋值给变量 在其他请求中调用
			xpath提取器 提取http请求的响应结果 --用于返回的html或xml数据
			正则表达式提取  --用于返回的文本数据

			http请求添加后置处理器 --xpath提取器 或者正则表达式提取器
			 	一个请求的xpath提取器--use tidy勾选 引用名 --title  xpath-query--//title
			 			正则表达式 引用名--title 表达式 --<title>(.*)</title> 模板-- $1$  匹配数字--1
			 				.匹配任意字符 +一次或多次 ?匹配到第一个后停止 *匹配所有
			 				$1$ 第一个值 如果还有$2$--第二个值
			 				1--代表全部取值 0--代表随机取值 一般是1
			 	另一请求中 路径 /?name=${title}
	jmeter环境变量
		系统环境变量中新建变量JMETER_HOME 输入jmeter目录 
		添加path %JMETER_HOME%\bin
	jmeter组件断言
		程序代替人工判断响应结果
		分类 断言响应的状态码 内容 内容的字节数 时间
	jmeter组件集合点
		内置组件 可以启动多个用户 同一时刻访问服务器
		模拟高并发

		框架(测试计划 结果树 线程组 http请求 聚合报告)--线程组通过线程数模拟多个用户
		添加集合点组件
			添加定时器 --Synchronizing Timer同步定时器
				属性 一组用户数/超时时间--设置0为无限等待 建议线程数可以整除集合点的一组用户数
	jmeter组件函数
		__random()
		__time()  yyyy-MM-dd HH:mm:ss
		__CSVRead()--(线程数) 和csv data setconfig(循环次数)类似 获取csv文件数据---必须用绝对路径
			线程组设置线程数3 对应文件中3条数据 函数中文件路径是绝对路径
			{
				'name':"${__CSVRead(C:\\Users\\HalO\\Desktop\\A测试笔记\\接口测试实例\\参数\\add.txt,0)}",
				'age':"${__CSVRead(C:\\Users\\HalO\\Desktop\\A测试笔记\\接口测试实例\\参数\\add.txt,1)}"
			}
		__setProperty() http请求响应结果经过xpath或正则过滤后定义变量名title 使用__setProperty(),设置全局变量out 
						设置变量值为${title} 生成函数${__setProperty(out,${title},)}添加到后置处理器BeanShell PostProcessor中 out变量会添加到全局属性 
						在另一个线程组中使用__property() 填写属性名out 生成函数 然后使用/?name=${__property(out,,)}
		__property()   两者跨线程组通信 原理是将线程组的数据导出到共享空间__setProperty()   其他线程组从共享空间获取__property() 

		查看共享空间 工作台-添加非测试元件--property display

	jmeter分布式
		多台机器协作完成(集群) 
		控制机 ---分发任务 结果汇总
		执行机 ---接收任务 做任务

		复制两个jmeter目录 改名A,B 在bin目录下jmeter.properties 搜port 找到 #server_port=1099 打开 设置端口号比如一个6666(server_port=6666) 一个7777
		控制机配置 remote_hosts=127.0.0.1:1099,127.0.0.1:1100 修改为 127.0.0.1:6666,127.0.0.1:7777
		执行机A,B启动服务 jmeter-server.bat 
		控制机 菜单栏 运行--远程全部启动 通过聚合报告查看

	jmeter组件逻辑控制器
		控制取样器执行顺序(分支+循环) 实现多样的业务逻辑
		分支控制器 if控制器 设置用户定义的变量 添加name变量 值lisi if条件中输 "${name}"=='lisi' 
		往复控制器 foreach控制器 --循环 用户定义的变量 如 name_1 aaa name_2 bbb name_3 ccc
				foreach组件中 输入变量前缀name 设置开始0 结束3 左闭右开 设置输出变量myname  对应http请求中 /?name=${myname}
		将一组关键字(php,js,java)取出在百度中搜索
			搭框架 测试计划 线程组 foreach控制器 http请求 结果树 用户定义的变量
			用户定义的变量按照变量前缀_编号添加数据 如word_1 php ...
			foreach中 输入变量前缀(如word) 输入起始结束 定义获得的值得变量 在http请求中使用${变量名}

		线程组的循环数是使线程组内所有请求都循环指定次数 而循环控制器可以控制指定请求而不是所有请求 更灵活
	jmeter组件qps 
		query per second 每秒查询率 每秒访问服务器资源多少次
		使用定时器 常量吞吐定时器 Constant Throughput Timer 
		   1搭框架 测试计划 线程组 常量吞吐定时器 聚合报告
		   循环次数为 频率*持续时间
		   2 常量吞吐定时器设置为每分钟的次数 频率*60
		   3查看聚合报告
	jmeter作用域
		大多数组件对树形结构上自己直接父级及兄弟级和子级...有效 如聚合报告
		逻辑控制器只对子级有效
		取样器不依赖任何组件 没有作用域

		各元件顺序
			配置元件 存储全局数据等
			前置处理程序 取样器之前执行的组件 存储批量执行的数据等
			定时器(集合点) 设置请求的用户 模拟多用户
			取样器 访问服务器
			后置处理程序 处理响应的数据
			断言  判断结果
			监视器 最后执行
		非测试组件
			 property display 显示系统共享数据
			 http mirror server 内置服务器
			 testFragment 测试片段   添加--Test Fragment 
			 	可以添加取样器 做成一个功能供调用
			 	作用和函数类似 可以封装某些功能
			 	执行也和函数类似 不调用不执行
			 	调用方式--模块控制器--- 选定Test Fragment 	
			 			include控制器---选择文件 执行其中功能
	jmeter 图形监视器
		服务端安装窃听程序 测试机端安装接收程序 添加监视器 监听ip和端口和服务端一致 添加监听的选项 线程组的线程数设置为永久
	jmeter ftp 端口一般为21
		是内置组件 线程组--添加sampler --ftp请求

	接口清单
		功能模块 每个功能分三要素:url+提交数据+响应数据
		从api文档整理提取
		写api文档 遵守restful风格
			描述性文本占50%以上
			格式清晰 规范 风格统一
			业务逻辑设计全面合理
		围绕三要素提取接口清单

		功能测试  测试接口是否正常运行 提交数据正向+反向
			 搭建测试框架
			 	数据在外部文档 添加csv-data-set-config读取文档 赋值给json数据值
			 设计测试用例 正向+反向  ---用什么类型数据 预设条件 预期结果 
			 	覆盖所有必选参数(正向)
			 	组合可选参数(正向_覆盖率 综合人力和时间)
			 	参数边界值 (逆向)
			 	如果参数为枚举变量 要覆盖全部
			 	空数据(逆向)
			 	特殊字符 如 +-*% 等
			 	越界数据(逆向 如长度过长或过短)
			 	错误数据(逆向 如错误的电话)
			 参数化覆盖用例 ---具体数据
			 	根据用例写实际数据进行测试
			 运行线程组 循环次数为文档数据行数
		自动化测试
		 	测试主要的经常复用的功能
		 	数据只考虑正向数据
		 	测试完将数据库数据恢复到之前状态
		 	线程组间尽量不要关联 不利于单独测试某个功能

		 	搭建框架 抽取http请求默认值 http信息头管理器 结果树
		 	setup和teardown线程组
		 	__counter生成数据 自定义前缀_计数器函数
		 	断言判断响应结果
		 	跨线程组传值 setup中使用setproperty teardown中使用property引入数据
		 性能测试
		 	模拟多种场景测试程序响应时间 出错率等

		 	参数化 避免外部读取数据
		 	在测试计划下添加查看结果树
		 	保留聚合报告
		 	每个功能点单独线程组 如增删改查
		 	如果并发量大 使用分布式
		 	新增和删除使用线程数和循环

		 300秒内启动100个用户 每个用户访问服务器20次
		 	设置线程组属性 线程数100 时间300 循环 20 聚合报告查看
		 100用户同时访问
		 	线程数100 同时访问 用集合点(定时器-同步定时器)
		 2个用户 以20qps 速率访问服务器 持续10秒
		 	线程数2 循环次数 qps*循环时间 20*10=200
		 	qps设置 定时器-常量吞吐器 换算成分钟 qps*60=1200

	生成html测试报告
		命令行   Jmeter -n -t 测试计划-练习jmeter.jmx  -l test.txt -e -o ./outHTML
				-n 非图形界面 -t source.jmx路径  -l 日志文件 结果保存路径(必须不存在 .jtl .txt 无后缀) 
				-e 脚本运行完生成测试html报告 -o 输出目录 html报告的路径(必须空文件夹) 
		先执行jmeter再生成html报告
			jmeter -g 日志文件 -o 输出到指定目录
			日志文件--聚合报告选择数据写入到文件 指定生成目录


fiddler 位于客户端和服务端的http代理 常用的http抓包工具 (web调试)
	记录客户端和服务器之间的所有 HTTP请求，可以针对特定的HTTP请求，分析请求数据、设置断点、调试web应用、修改请求的数据，甚至可以修改服务器返回的数据
	1拦截请求 --修改客户端发送的数据
		注册页面-点击注册前 选择rules--automatic--before request 然后右侧inspectors ---webform 修改发送数据 选择下方 run to completion
		其他红色连接也是选择run to completion  修改发送数据
	2反向代理 AutoResponder --修改服务器响应的数据
		打开浏览器 输入网址 右键勾选 unlock for editing , 选择Fiddler右侧reponse块下的TextView，这里修改title  右键去掉 unlock for editing
		选择右侧autoresponder 勾选enable... unmatched...选项 将刚才链接拖动过来 回到浏览器 刷新
	3模拟低网速
		Rules → Performances → Simulate Modem Speeds




















