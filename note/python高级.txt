定义函数
	def 函数名():
		函数体
调用 函数名()

形参定义格式: def 函数名(形参1, 形参2, ...):
执行 函数名(实参1,实参2,...)

返回值 
def sum(a,b):
	res=a+b
	return res
result=sum(1,2)
print(result)

# 四种函数的类型
# 01- 无参数无返回值
	def my_print():
	    print("你好")
# 02- 无参数有返回值
	def my_pi():
	    return 3.1415926
# 03- 有参数无返回值
	def print_info(name):
    	print("你好%s" % name)
# 04- 有参数有返回值
	 def my_func(a, b):
	     ret = a - b
	     return ret
函数嵌套

1位置参数 调用函数 形参和实参要一一对应 fun(20,'lisi')
2关键字调用 fun(age=20,name="lisi")
3混合使用  位置参数在前 关键字参数在后 fun(20,name="lisi")
	如果某个参数使用了关键字参数 后面都需要用关键字 fun(20,name="lisi",addr='bj')
4缺省参数 给形参设置默认值 带默认值的参数要在形参列表后面
	def fun(name,age=20):
		print('name:%s,age:%d'%(name,age))
	有实参用实参 没有实参用默认形参值 

只要函数中执行了return 提前结束函数的执行 而且return后面的代码将不再执行
return 作为函数返回值 提前结束函数

# 元组
def deal_name_age(name, age):
    # 处理后 姓名:小明  年龄:22
    new_name = "姓名:%s" % name
    new_age = "年龄:%d" % age
    # 如果在函数内部 使用return 返回值1 返回值2,... 默认就是元组类型 不需要写小括号
    return new_name, new_age
my_tuple = deal_name_age("小明", 22)
print(my_tuple[0])

# 字典
# def deal_name_age(name, age):
#     # 处理后 姓名:小明  年龄:22
#     new_name = "姓名:%s" % name
#     new_age = "年龄:%d" % age
#     return {"name":new_name, "age":new_age}
# my_dict = deal_name_age("小明", 22)
# print(my_dict["name"])

# 列表
def deal_name_age(name, age):
    # 处理后 姓名:小明  年龄:22
    new_name = "姓名:%s" % name
    new_age = "年龄:%d" % age
    return [new_name, new_age]
ret = deal_name_age("小明", 22)
print(ret[0])

拆包
	列表
	# num, pi, my_str, my_bool = [1, 3.14, "hello", True]
	print(num)
	字典
	# my_dict = {"name":"老王", "age": 19}
	# ret1, ret2 = my_dict //得到的是key name age
	元组
	# my_tuple = (1, 3.14, "hello", True)
	# num, pi, my_str, my_bool = my_tuple

定义多个变量
num1,num2,num3=1,2,3
print(num1)
 
# 自定义一个函数 
def add2num(num1, num2):
    """
    这个函数是用来计算两个数的和的
    :param num1: 数字1
    :param num2: 数字2
    :return: 返回值是两个数字相加
    """
    return num1 + num2

查看函数文档
help(add2num)

在函数内部定义变量为局部变量 作用域是函数内部 外部不能使用
函数内的局部变量可以和其他函数局部变量名一样 不影响
全局变量是定义在函数外的变量 作用域整个模块
函数内可以使用全局变量 其实是定义了和全局变量名一样的局部变量
函数内部先找局部变量 找不到时到函数外找 就是全局变量 还是找不到就报错

# 全局变量
num = 10
def my_func1():
    # 标识这函数内部不是定义一个局部变量 其实是对全局变量的进行修改
    global num
    # 对全局变量的值进行修改
    num = 20
    print("my_func1", num)
my_func1() //my_func1 20

print("外面", num) //外面 20

匿名函数
f = lambda : print("hello python") //定义匿名无参数无返回值函数
f() //(lambda : print("hello python"))()
f = lambda : 3.14  //匿名无参数有返回值函数 --> def my_pi():return 3.14
print(f())
f = lambda name: print("你好%s" % name) //有参数无返回值 
f("lisi")
f = lambda a, b : a + b //有参数有返回值
print(f(1,2))

列表推导式
											list=[]
list=[i for i in range(1,10)]	-->			for i in range(1,10):
												list.append(i)
list1=['hello' for i in range(1,10)] -->列表有十个"hello"

my_list = [i for i in range(1, 51) if i % 2 == 0] -->1-50之间偶数

文件操作
	打开 关闭
	f=open('1.txt','r') r--只读模式 文件存在则打开 不存在则报错 w--只写模式
	f.close()
	写数据
	f=open('1.txt','w') //写入数据会把原有数据清空在写入
	f.write("hello")
	f.close()
	追加数据
	f=open('1.txt','a') a--追加数据
	f.write("hello")
	f.close()
	读数据
	f=open('1.txt','r')  // f=open('1.txt','r',encoding="utf-8") 读取中文
	res=f.read()
	lines=f.readlines() //每行数据保存到列表
	print(res)
	f.close()
	读写中文
	f = open("1.txt", "w", encoding="utf-8")
	f.write("你好")
	f.close()

	 引入os模块
	import os
	os.rename('1.txt','2.txt') //rename(旧,新) 重命名
	os.remove('1.txt')  //删除
	os.mkdir("dir") //创建dir文件夹
	os.getcwd() //获取当前目录 绝对路径 可以看到盘符 

	# os.chdir("../") //选择默认目录
	# ret= os.getcwd()
	# print(ret)  

	my_list = os.listdir()
	print(my_list) //获取目录列表

	os.rmdir('dir') //删除文件夹
	os.path.exists(file) //判断是否存在该文件
	os.path.exists(dir) //判断是否存在该文件夹

批量修改文件名
	import os
	os.mkdir("文件夹1")
	os.chdir("文件夹1")
	for i in range(1,10):
		f=open("hm%d.txt"%i,"w")
		f.close()
	list=os.listdir()
	for file in list:
		new_file=file.replace(".txt","[中国].txt")
		os.rename(file,new_file)


# 01 经典类
# class Hero:  
#     pass
#
#  02 经典类
# class Hero():
#     pass

# 03 建议这么写 新式类
#class Hero(object):
#    pass

在python2.x中 01 02 相同 而03是有父类的
phthon3.x中 无论 写 01  02  03哪种方式 都是继承与object 类

class Hero(object):
	#定义方法 即实例方法 或对象方法 
	#实例方法第一个参数为self 名字 下划线或小驼峰
	def move(self):
		print(id(self)) 谁调用 self就是谁
		print("move")
	def info(self):
		print(self.name,self.age)
自定义类创建对象 调用方法
	hero1=Hero()
	hero1.move()

	hero1.name="yase" //类外面 对象名.属性
	hero1.age=10

	类的实例方法中 用self.属性 self-->调用方法的对象
	hero1.info()

	魔法方法 __方法名__

	无参数init方法
	class Dog(object):
		def __init__(self):
			print("init")
			self.name='dog1'
			self.age=10
		def eat(self):
			print("eat")
		def info(self):
			print(self.name,self.age)
	dog=Dog()
	dog.name="dog2"
	dog.age=15
	dog.info()

	有参数init方法
	class Dog(object):
		def __init__(self,name,age=10):
			print("init")
			self.name=name
			self.age=age
		def eat(self):
			print("eat")
		def info(self):
			print(self.name,self.age)
	dog=Dog('lisi',15)
	dog.info()


# class Hero(object):
#     # 构造方法
#     def __init__(self, name, hp, atk):
#         # 设置属性的值
#         self.name = name
#         self.hp = hp
#         self.atk = atk
# 	不可以添加参数(形参)  会返回一个字符串 追踪对象属性信息变化
#     def __str__(self):
#         return "名字:%s 血量:%d 攻击力:%d" % (self.name,self.hp,self.atk)
# wukong = Hero("悟空", 4000, 400)
如果类中实现了__str__方法 如果打印对象名 会输出的是__str__方法中的返回值(字符串)
# print(wukong) //名字:悟空 血量:4000 攻击力:400


super默认会调用继承的父类中第一个父类的方法
	 super(子类类名, self).父类方法名()    或者   super().父类方法名()
类属性使用   类名.类属性名   对象名.类属性名
如果一个属性的名字开头是两个下划线 就代表这个属性私有 类外面不能通过对象调用该属性
	self.__money = 10000
方法名字开头两个下划线 私有方法 类外部不能调用
 "子类继承了父类 如果父类的属性或者方法私有后 将不会被继承"
 修改私有属性
 	类里面# 定义一个方法(获取属性的值 一般方法名中使用get)	
 	def get_age(self):
        return self.__age 
       外部获取属性 对象.get_age()
 	定义一个方法(对属性赋值的时候 一般方法名中使用set)
    def set_age(self, new_age):
        self.__age = new_age
        外部改变属性值 对象.set_age(int)

不同的实例对象指向地址不同 属性地址也不同 但是方法地址(id)相同 
多态 给函数或者方法 增加的扩展性 和 提高开发效率
静态方法(@staticmethod) def 方法名() --不常用
	调用 对象.方法名()  类名.方法名() 
类方法 
	@classmethod
	def 方法名(cls)
实例方法 对象方法 def 方法名(self)

try:
    执行可能发生异常的代码
except 异常类型:
    如果发生异常执行的代码

try:
    执行可能发生异常的代码
excpet 异常类型 as 临时变量名:
    可以获得临时变量名

try:
    open("hm1.txt", "r")
except FileNotFoundError as e:
    # as 临时变量 使用临时变量保存异常的信息描述
    print("捕获到异常了", e)

# try:
#     执行可能发生异常的代码
# excpet (异常类型1, 异常类型2, ....) as 临时变量名:
#     可以获得临时变量名

try:
    open("hm.txt", "r")
    print(num)

except (FileNotFoundError, NameError) as e:
    print(e)


try:
    执行可能发生异常的代码
except Exception as 临时变量:
    发生异常执行的代码

try:
    open("hm.txt", "r")

except:
    # try中的代码发生了异常执行except代码
    print("except")
else:
    # 如果try中的代码没有发生异常 就会执行else中的代码
    print("else")

try:
    open("hm1.txt", "r")

except:
    # try中的代码发生了异常执行except代码
    print("except")
else:
    # 如果try中的代码没有发生异常 就会执行else中的代码
    print("else")
finally:
    # 无论try中的异常代码是否发生异常 finally都会执行
    print("finally")

try-except-finally try-finally



# 变量(全局变量 局部变量 实例属性 类属性) -> 函数(实例方法 类方法 静态方法)
# -> 类 -> 模块 -> 包 -> 工程(项目)



import 模块名
模块名.全局变量名
模块名.函数名
模块名.类名
	# p = hm_sum.Person()
	# p.eat()

 格式: from 模块名 import 全局变量  函数  类
		from hm_sum import name, add2num, Person
	# 如果一个模块中使用了__all__
	# 只用在__all__的列表中的字符串才可以在其他模块中使用  __all__ = ["name","age"]

	# 把另一个模块的全局变量 或者 函数 或者类 全部导入
	# 不需要写模块名(和import导入)
	from hm_sum import *

	# 格式: import 模块名 as 别名
	# import hm_sum as hmhm_sum

	# import 包名.模块名(目录下的文件) as 别名
	import hmhm.hmhm_sum as hmhm_sum




单继承 多继承 子类重写父类同名属性和方法  子类调用父类同名属性和方法

# 自定义一个师傅类
class Master(object):
  # 构造方法
    def __init__(self):
        self.kongfu = "古法煎饼果子配方"
    # 擅长做煎饼果子
    def make_cake(self):
        print("按照<%s>制作煎饼果子" % self.kongfu)
# 创建出一个李师傅
lishifu = Master()
print(lishifu.kongfu)
lishifu.make_cake()
# 自定义一个徒弟类
# 子类继承了父类 就拥有了父类的"方法"和"属性"
# 子类拥有了父类的属性 是因为子类使用了父类的__init__(对属性赋值的地方)
class Prentice(Master):
    pass
# 自定义一个大猫
damao = Prentice()
print(damao.kongfu)
damao.make_cake()


# 自定义一个师傅类-(古法)
class Master(object):

    # 构造方法
    def __init__(self):

        self.kongfu = "古法煎饼果子配方"

    # 擅长做煎饼果子
    def make_cake(self):
        print("按照<%s>制作煎饼果子" % self.kongfu)

    # 大烟袋
    def dayandai(self):
        print("大烟袋")


# 自定义一个新东方-(现代)
class School(object):

    # 构造方法
    def __init__(self):
        self.kongfu = "现代煎饼果子配方"

    # 擅长做煎饼果子
    def make_cake(self):
        print("按照<%s>制作煎饼果子" % self.kongfu)

    # 小烟袋
    def xiaoyandai(self):
        print("小烟袋")


# 自定义一个徒弟类
class Prentice(Master, School):
    pass

# 自定义一个大猫
damao = Prentice()
# 为什么会打印的是第一个父类的属性-> 古法煎饼果子配方?
#如果两个父类的方法名(__init__ )相同
print(damao.kongfu)
# 如果两个父类的方法名相同 子类会执行第一个父类的
damao.make_cake()
# 如果两个父类的方法名不同 子类会分别执行
damao.dayandai()
damao.xiaoyandai()



# 自定义一个师傅类-(古法)
class Master(object):

    # 构造方法
    def __init__(self):
        self.kongfu = "古法煎饼果子配方"

    # 擅长做煎饼果子
    def make_cake(self):
        print("按照<%s>制作煎饼果子" % self.kongfu)



# 自定义一个新东方-(现代)
class School(object):

    # 构造方法
    def __init__(self):
        self.kongfu = "现代煎饼果子配方"

    # 擅长做煎饼果子
    def make_cake(self):
        print("按照<%s>制作煎饼果子" % self.kongfu)


# 自定义一个徒弟类
class Prentice(Master, School):

    # 构造方法
    def __init__(self):
        self.kongfu = "猫氏煎饼果子配方"

    # 擅长做煎饼果子
    # 子类继承了父类 子类重写父类已有的方法
    # 重写: 子类继承父类 做自己特有的事情
    def make_cake(self):
        print("按照<%s>制作煎饼果子" % self.kongfu)


# 自定义对象 大猫
# 如果子类的方法名(子类已经重写父类的方法)和父类的相同的时候 默认会使用子类的方法
# 为什么会使用子类的属性(kongfu) 子类重写了父类已有的__init__方法
damao = Prentice()
damao.make_cake()



# 自定义师傅类-古法
class Master(object):

    # 方法
    def make_cake(self):
        print("古法煎饼果子")


# 自定义师傅类-现代
class School(object):

    # 方法
    def make_cake(self):
        print("现代煎饼果子")


# 自定义一个徒弟类
class Prentice(Master, School):

    # 方法
    def make_cake(self):
        print("猫氏煎饼果子")

    # 古法
    def make_old_cake(self):

        Master.make_cake(self)

    # 现代
    def make_new_cake(self):

        School.make_cake(self)


# 自定义一个对象 大猫
damao = Prentice()
# 猫氏
damao.make_cake()
# 古法
damao.make_old_cake()
# 现代
damao.make_new_cake()

