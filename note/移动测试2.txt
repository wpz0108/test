
pytest配置文件
	常用插件
	高阶用法
	fixture
po模式
	多文件区分测试用例
	封装前置代码
	分离测试脚本
	抽取找元素特征
	抽取action
	增加WebDriverWait
xpath特殊处理
yaml数据存储文件
python解析yaml文件
yaml数据驱动应用
Allure报告
Allure之pytest
jenkins安装
	持续集成配置
	触发项目构建方式
	邮件配置
xpath精确查找
	多条件查找
文件管理


pytest安装介绍
	pytest是python的单元测试框架 同自带的unittest测试框架类似 相比unittest更简洁 效率更高

	简单 文档丰富 
	支持简单的单元测试和复杂的功能测试
	支持参数化
	执行测试中可以跳过某些测试 或对预期失败的case标记失败
	支持重复执行失败的case
	支持运行nose,unittest编写的测试用例
	有许多插件 可以自定义扩展
	方便的和持续集成工具集成

	安装
		mac/linux sudo pip install -U pytest   //-U 升级最新版本
		windows 管理员运行cmd pip install -U pytest  //多个python版本 就指定pip3

		代码执行 123.py 右键运行
			import pytest
			def test_login():
			    print('login')
			if __name__ == '__main__':
			    pytest.main(['-s','123.py'])
		命令行 123.py
			import pytest
			def test_login():
			    print('login')
			下面terminal打开 输入pytest -s 123.py
		. 代码通过
		F 代码不通过

	setup和teardown函数
		分为函数级 类级 模块级 功能级
		存在于测试类内

		函数级别 测试方法的始末 每个测试函数开始前和结束后会执行setup,teardown
			import pytest
			class TestLogin():
			    def setup(self):
			        print('setup')
			    def test_login(self):
			        print('login')
			    def test_login1(self):
			        print('login1')
			    def teardown(self):
			        print('teardown')
			if __name__ == '__main__':
			    pytest.main(['-s','123.py'])
		类级别 测试类的始末 每个测试类开始前和结束后会执行setup,teardown 不管有多少测试方法
			import pytest
			class TestLogin():
			    def setup_class(self):
			        print('setup')
			    def test_login(self):
			        print('login')
			    def test_login1(self):
			        print('login1')
			    def teardown_class(self):
			        print('teardown')
			if __name__ == '__main__':
			    pytest.main(['-s','123.py'])

	pytest配置文件
		通常在测试目录下 名为pytest.ini 命令行运行时会使用该配置文件中的配置

		[pytest]
		addopts=-s  # 可以添加多个插件的参数
		testpaths=./scripts # 配置搜索目录 当前目录下scripts 自定义
		python_files=test*.py # 配置搜索的文件 以test开头 .py结尾的文件 自定义
		python_classes=Test*  # 指定运行test开头的类
		python_functions=test* # 指定运行test开头的方法

	测试报告
		pytest-html插件  
			命令行安装  pip install pytest-html
			命令行使用 pytest -s testxx.py --html=路径/report.html

			1 test123.py
				import pytest
				class TestLogin():
				    def setup_class(self):
				        print('setup')
				    def test_login(self):
				        print('login')
				    def test_login1(self):
				        print('login1')
				    def teardown_class(self):
				        print('teardown')
				if __name__ == '__main__':
				    pytest.main(['-s','test123.py'])
			2 pytest.ini
				[pytest]
				addopts=-s --html=./report/1.html
				testpaths=./
				python_files=test*.py
				python_classes=Test*
				python_functions=test*
			3 命令行 运行pytest 生成测试报告

		pytest-ordering插件
			命令行安装 pip install pytest-ordering
			@pytest.mark.run(order=x) 根据x的大小确定执行顺序 无论正负越小优先级越高 正数优先级大于负数

			    @pytest.mark.run(order=7)
			    def test_login(self):
			        print('login')
			    @pytest.mark.run(order=5)
			    def test_login1(self):
			        print('login1')

		pytest-rerunfailures插件
			命令行安装 pip install pytest-rerunfailures
			命令行使用 pytest -s testxx.py --reruns 5

			pytest.ini中 addopts=-s --html=./report/1.html --reruns 5

				import pytest
				class TestLogin():
				    def setup_class(self):
				        print('setup')
				    def test_login(self):
				        print('login')
				    def test_login1(self):
				        print('login1')
				        assert 0
				    def teardown_class(self):
				        print('teardown')
				if __name__ == '__main__':
				    pytest.main(['-s','test123.py'])
			命令行执行pytest 

			失败重试过程中 如果成功就不再重试了

	pytest高阶用法
		fixture标记函数
			1参数引用 test_login1会在test_login之前执行
				import pytest
				class TestLogin():
				    def test_login(self,test_login1):
				        print('login')
				    @pytest.fixture()
				    def test_login1(self):
				        print('login1')
				if __name__ == '__main__':
				    pytest.main(['-s','123.py'])
			2函数引用
				    @pytest.mark.usefixtures('test_login1')
				    def test_login(self):
				        print('login')
				    @pytest.fixture() 
				    def test_login1(self):
				        print('login1')
			3 pytest.fixture加入参数autouse=True 会在setup方法前执行
				import pytest
				class TestLogin():
				    def setup(self):
				        print('setup')
				    def test_login(self):
				        print('login')
				    @pytest.fixture(autouse=True)
				    def test_login1(self):
				        print('login1')
				if __name__ == '__main__':
				    pytest.main(['-s','123.py'])
			4   @pytest.fixture(autouse=True,scope="function")   在函数前执行 默认autouse=False scope='function'
				 @pytest.fixture(autouse=True,scope="class")  在类之前执行

			fixture返回值  在test_login之前执行 打印也会有test_login1的返回值
				import pytest
				class TestLogin():
				    def setup(self):
				        print('setup')
				    def test_login(self,test_login1):
				        print('login')
				        print(test_login1)
				    def test_login2(self):
				        print('login2')
				    @pytest.fixture()
				    def test_login1(self):
				        print('login1')
				        return 'aaa'
				if __name__ == '__main__':
				    pytest.main(['-s','123.py'])

				@pytest.fixture(params=列表)
			    def 方法名(self,reuest) 
			    return request.param  这些固定格式 执行多次 列表元素个数次
						    import pytest
							class TestLogin():
							    def setup(self):
							        print('setup')
							    def test_login(self,test_login1):
							        print('login')
							        print(test_login1)
							    def test_login2(self):
							        print('login2')
							    @pytest.fixture(params=[1,2,'a'])
							    def test_login1(self,request):
							        print('login1')
							        return request.param
							if __name__ == '__main__':
							    pytest.main(['-s','123.py'])


		跳过测试函数 @pytest.mark.skipif(condition,reason="xx") 参数 跳过的条件 必须 标注原因 必须

			@pytest.mark.skipif(True,reason="done")
		    def test_login1(self):
		        print('login1')
		        assert True

		标注为预期失败函数  @pytest.mark.xfail(condition,reason="xx") 预期失败的条件 必填 失败原因 必填 其余参数选填
			预期失败 结果成功		xpassed 红
			预期失败 结果失败		xfailed 橙
			预期成功 结果成功		passed 绿
			预期成功 结果失败		failed 红
			@pytest.mark.xfail(True,reason="")  # 预期成功 结果成功
		    def test_login1(self):
		        print('login1')
		        assert True
		    @pytest.mark.xfail(False,reason="") # 预期失败 结果失败	
		    def test_login1(self):
		        print('login1')
		        assert False

		函数数据参数化 单个参数 多个参数
			@pytest.mark.parametrize('key',['a','b'])
		    def test_login(self,key):
		    	driver=self.driver
		        driver.find_element_by_xx.send_keys(key)
		    @pytest.mark.parametrize(('name','age'),[('lisi','10'),('wangwu','12')])
		    def test_login1(self,name,age):
		    	driver=self.driver
		        driver.find_element_by_xx.send_keys(name)
		        driver.find_element_by_xx.send_keys(age)
	PO模式 page object model
		测试页面和脚本分离 页面封装成类 供脚本调用
		优点是提高代码可读性 减少代码重复 提高测试用例可维护性 缺点是复杂化

		多个文件区分不同的测试页面 好处是修改不同的功能找对应文件

		步骤 1前置代码封装
			2分离测试脚本 测试脚本只有流程 其他步骤放到page中
				page中定义每一步动作 具体方法由BaseAction定义 供page中的方法使用
				scripts中直接调用page中动作 形成连贯的一套操作
				driver由脚本传入 传给page 再传给action中init初始化方法
			3抽取元素特征 如find_element_by_xx 改成find_element 将方式和特征向上移动
			4抽取action 封装动作 click 和send_keys base_action.py
			5xpath的处理 封装函数 使传入数据变为字符串或列表 由函数判断拼接
			6yaml数据存储

	yaml
		PyYaml python解析yaml的库
		安装 pip install -U PyYaml

		大小写敏感
		使用缩进表示层级 空格进行锁进 
		相同层级元素对齐即可 和空格缩进的数无关

		数据类型 
			对象 键值对集合 字典
				值为字符 animal:pig -->{'animal':'pig'}
				值为字典 animal:{'k1':'v1','k2':'v2'} -->{'animal':{'k1':'v1','k2':'v2'}}
			数组 又叫序列 列表
				animal:
				 -pig    -->{'animal':['pig','dog']}
				 -dog

				 animal:['pig','dog'] -->{'animal':['pig','dog']}

			纯量 单个不可再分的 如字符串 布尔 整数 浮点数 Null 日期
				value:2019-8-23 17:38:10 -->{'value':datetime.datetime(2019,8,23,17,38,10)}

		锚点和引用 标注内容 <<:* 引用
			data:&imp #标注
			 value:123
			name:
			 value1:456
			 <<:*imp  # '<<:'合并到当前位置 '*imp'引用

			 上面转换成python代码 {'data':{'value':'123'},'name':{'value':'123','value1':'456'}}


		#字典
		#name: "zhang"
		#age: 17
		#列表
		#- "1"
		#- "2"
		#- "3"
		#字典嵌套字典 {'name':'li','likes':{'qiu':'lanqiu','youxi':'wz' }}
		#name: 'li'
		#likes:
		#  qiu: 'lanqiu'
		#  youxi: 'wz'
		#字典嵌套列表 {'name':'li','likes':['a','b','c']}
		#name: 'li'
		#likes:
		#  - 'a'
		#  - 'b'
		#  - 'c'
		#列表嵌套字典[1,2,'a',{'name':'li','age':17}]
		#- '1'
		#- '2'
		#- 'a'
		#-
		#  name: 'li'
		#  age: '17'

		#列表嵌套列表 [1,2,[3,4,'a']]
		#- '1'
		#- '2'
		#-
		#  - '3'
		#  - '4'
		#  - 'a'

		#列表包含元组tuple [('a','b'),('c','d')]

		- !!python/tuple
		  - a
		  - b
		- !!python/tuple
		  - c
		  - d


		读取数据
			import yaml
			def main():
			    with open('./data.yml','r',encoding='UTF-8') as f:
			        data=yaml.load(f, Loader=yaml.FullLoader)
			        print(type(data))
			        print(data)
			if __name__ == '__main__':
			    main()

		写入数据
			import yaml
			def main():
			    data={'a':{
			                'b':{'c':{'key':'value'}},
			                'd':{'e':['k1','k2','许嵩'],'f':'v2'}
			                }
			         }
			    with open('./data.yaml','w',encoding='utf-8' ) as f:
			    	#支持中文
			        yaml.dump(data,f,allow_unicode=True)
			if __name__ == '__main__':
			    main()

	
Allure报告
	独立的报告插件 生成美观的报告
	安装插件 pip install pytest-allure-adaptor
	生成报告 
		命令行 pytest --alluredir report //在执行命令的目录生成report文件夹 里面生成xml
		ini文件中  addopts=-s --alluredir report

	出现下面问题
			INTERNALERROR> pytest.allure._allurelistener = testlistener
			INTERNALERROR> AttributeError: 'module' object has no attribute 'allure'
			 
			解决
			cmd执行如下命令：
			pip uninstall pytest-allure-adaptor

			下面命令下载allure	
			pip install -U allure-pytest

	xml转html
		allure-commandline-2.12.1.zip 下载解压 allure-2.12.1 将bin目录路径添加到系统环境变量
		allure generate report/ -o report/html --clean  //第一次执行不加--clean
allure之pytest 
 	import allure
		添加测试步骤  方法前 @allure.step(title="测试搜索")
		添加测试描述  方法每一步前 allure.attach("输入数据")
		添加严重等级	 方法前 @pytest.allure.severity(pytest.allure.severity_level.CRITICAL) //有问题 用不了

jenkins
	下载jenkins安装
	安装Allure Jenkins Plugin(管理插件) 和Allure Commandline插件(全局工具)
	新建项目 选择github project 填写url项目地址
	高级里面选git 输入项目地址 add添加用户密码
	勾选poll scm 定时任务 (* /1 * * * *)  每分钟检查一次 有改动就构建
	点击增加构建步骤 选 execute shell
	PATH=$PATH;pytest可执行目录  pip show pytest
	增加步骤后选allure report ,path写生成报告的文件夹名 要和pytest生成的文件夹名一致

	邮件配置
		发件人配置
			配置邮件系统用户
				系统管理-系统设置-jenkins location
				系统管理员邮件地址-如xx@163.com(发送邮件的用户)
			配置系统邮件
				系统管理-系统设置-邮件通知
				smtp服务器
				用户默认邮件后缀
				高级-smtp认证
				输入发送邮件和密码 --测试邮件
			配置发送邮件
				系统管理-系统设置-extended e-mail notification
				smtp server 如smtp.163.com
				default user email  suffix 如 @163.com
				高级-user smtp authentication -输发送邮件的邮箱和密码
				default content type 选html
				报告模板内容(名称:$参数)
		发件人配置
			点击增加构建后的步骤
			editable email notification
			advanced setting
			triggers
			recipient list 接受邮件的人xx@xx.com ,分隔

webview
	chrome://inspect

webview自动化
	前置代码 和之前一样 包名启动名是浏览器软件
	contexts=driver.contexts
	for i in contexts:
		print(i)
	得到原生app字符串和webvie字符串 如 NATIVE_APP WEBVIEW_cn.xxx.xx WEBVIEW_com.android_browser等
	switchto切换  driver.switch_to.context("WEBVIEW_com.android_browser")
	根据html元素查找 find_element_by_xx

	点击新闻案例

		前置代码
		driver.find_element_by_xx.click()
		#查看启动名
		for i in contexts:
			print(i)
		#查找网页元素
		#driver.switch_to.context("WEBVIEW_com.android_browser")
		driver.switch_to.context(启动名)
		driver.find_element_by_xx.click()
		driver.find_element_by_xx.send_keys()
		#查找原生元素
		driver.switch_to.context("NATIVE_APP")
		driver.find_element_by_xx.click()
		driver.find_element_by_xx.send_keys()

monkey 安卓的压力测试
	adb shell monkey 参数
	或者adb shell 进入手机系统 再 monkey 参数
	或者模拟器 真机中直接monkey 参数

	-p指定测试的包名 不指定就测所有app
	adb shell monkey -p 包名 100
	adb shell monkey -p 包名 -p 包名 100
	-v 反馈级别 ( adb shell monkey -p 包名 -v -v 100 )
		-v 0级 简单 缺省值 默认0级
		-v -v 1级 详细
		-v -v -v 2级 最详细
	--throttle 事件延迟ms 一个事件可以包括多个动作 命令最后的是动作次数100 事件没有那么多次

	monkey日志 --pct-touch 触摸事件百分比 --pct-motion 动作事件百分比 等等参数
	adb shell monkey -p 包名 -v -v --throttle 200 --pct-touch 50 100 > 路径/x.txt

	伪随机 可以再现 seed值相同 结果相同

							  日志显示级别	事件间隔ms   	触摸事件百分比 	伪随机	seed值  执行动作次数
	adb shell monkey -p 包名 	-v -v 		--throttle 200 --pct-touch 50  	-s  	10 			100 		> 路径/x.txt

	adb shell pm list packages 展示已经安装的应用




